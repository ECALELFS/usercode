from parameters_data import *

def printSubmitSrc(outputfile, cfgName, source1, source2, destination, OnlyContCorr, pwd):
    outputfile.write("#!/bin/bash\n")
    outputfile.write("cd " + pwd + "\n")
    outputfile.write("export SCRAM_ARCH=slc5_amd64_gcc434\n")
    outputfile.write("eval `scramv1 runtime -sh`\n")
    outputfile.write("echo 'cmsRun " + cfgName + "'\n")
    outputfile.write("cmsRun " + cfgName + "\n")
    outputfile.write("echo 'cmsStage -f " + source1 + " " + destination + "'\n")
    outputfile.write("cmsStage -f " + source1 + " " + destination + "\n")
    outputfile.write("echo 'rm -f " + source1 + "'\n")
    outputfile.write("rm -f " + source1 + "\n")

def printFillCfg(pwd, outputfile, njob, outdir, OnlyContCorr, nInter, useES, cuts4s9):
    outputfile.write("import FWCore.ParameterSet.Config as cms\n")
    outputfile.write("process = cms.Process('PI0DUMPER')\n")
    if(is2012):
        outputfile.write('process.load("Configuration.Geometry.GeometryIdeal_cff")\n\n')
    else:
        outputfile.write('process.load("Configuration.StandardSequences.GeometryIdeal_cff")\n\n')
    outputfile.write('process.load("FWCore.MessageService.MessageLogger_cfi")\n\n')
    outputfile.write('process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")\n')
    outputfile.write("process.GlobalTag.globaltag = '" + globaltag + "'\n")
    outputfile.write("\n")
    outputfile.write("correctHits = True\n")
    outputfile.write("useHLTFilter = True\n")
    outputfile.write("\n")
    outputfile.write("if correctHits:\n")
    outputfile.write("    print 'CORRECTING HITS'\n")
    outputfile.write("    \n")
    outputfile.write("if useHLTFilter:\n")
    outputfile.write("    print 'FILTERING PI0 EVENTS'\n")
    outputfile.write("\n")
    outputfile.write("import RecoLocalCalo.EcalRecProducers.ecalRecalibRecHit_cfi\n")
    if (overWriteGlobalTag):
        outputfile.write("process.GlobalTag.toGet = cms.VPSet(\n")
        outputfile.write("        cms.PSet(record = cms.string('" + laserTagRecord + "'),\n")
        outputfile.write("             tag = cms.string('" + laserTag + "'),\n")
        outputfile.write("             connect = cms.untracked.string('" + laserDB + "')\n")
        outputfile.write('     ),\n')
        outputfile.write("     cms.PSet(record = cms.string('" + alphaTagRecord + "'),\n")
        outputfile.write("             tag = cms.string('" + alphaTag + "'),\n")
        outputfile.write("             connect = cms.untracked.string('" + alphaDB + "')\n")
        if(GeVTagRecord=='' and alphaTag2==''):
           outputfile.write('     )\n')
        if not(GeVTagRecord==''):
           outputfile.write('     ),\n')
           outputfile.write("     cms.PSet(record = cms.string('" + GeVTagRecord + "'),\n")
           outputfile.write("             tag = cms.string('" + GeVTag + "'),\n")
           outputfile.write("             connect = cms.untracked.string('" + GeVDB + "')\n")
           if(alphaTag2==''):
              outputfile.write('     )\n')
        if not(alphaTag2==''):
           outputfile.write('     ),\n')
           outputfile.write("     cms.PSet(record = cms.string('" + alphaTagRecord2 + "'),\n")
           outputfile.write("             tag = cms.string('" + alphaTag2 + "'),\n")
           outputfile.write("             connect = cms.untracked.string('" + alphaDB2 + "')\n")
           outputfile.write('     )\n')
    outputfile.write(')\n\n')
    outputfile.write('### Recalibration Module to apply laser corrections on the fly\n')
    outputfile.write('if correctHits:\n')
    outputfile.write('    process.ecalPi0ReCorrected =  RecoLocalCalo.EcalRecProducers.ecalRecalibRecHit_cfi.ecalRecHit.clone(\n')
    outputfile.write('        doEnergyScale = cms.bool(' + doEnenerScale + '),\n')
    outputfile.write('        doIntercalib = cms.bool(' + doIC + '),\n')
    outputfile.write('        doLaserCorrections = cms.bool(' + doLaserCorr + '),\n')
    outputfile.write("        EBRecHitCollection = cms." + ebInputTag +",\n")
    outputfile.write("        EERecHitCollection = cms." + eeInputTag +",\n")
    if(Are_pi0):
        outputfile.write('        EBRecalibRecHitCollection = cms.string("pi0EcalRecHitsEB"),\n')
        outputfile.write('        EERecalibRecHitCollection = cms.string("pi0EcalRecHitsEE")\n')
    else:
        outputfile.write('        EBRecalibRecHitCollection = cms.string("etaEcalRecHitsEB"),\n')
        outputfile.write('        EERecalibRecHitCollection = cms.string("etaEcalRecHitsEE")\n')
    outputfile.write('    )\n\n') 
    outputfile.write('### Running on AlcaRAW requires filtering AlcaPi0 events from AlcaEta events\n')
    outputfile.write('if useHLTFilter:\n')
    outputfile.write('    import copy\n')
    outputfile.write('    from HLTrigger.HLTfilters.hltHighLevel_cfi import *\n')
    outputfile.write('    process.AlcaP0Filter = copy.deepcopy(hltHighLevel)\n')
    outputfile.write('    process.AlcaP0Filter.throw = cms.bool(False)\n')
    outputfile.write('    process.AlcaP0Filter.HLTPaths = ["' + HLTPaths + '"]\n\n')
    
    outputfile.write("process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(" + str(nEventsPerJob) +") )\n")
    outputfile.write("process.MessageLogger.cerr.FwkReport.reportEvery = 1000000\n")
    outputfile.write("process.MessageLogger.cerr = cms.untracked.PSet(\n")
    outputfile.write("        threshold  = cms.untracked.string('WARNING'),\n")
    outputfile.write("        ERROR      = cms.untracked.PSet (\n")
    outputfile.write("                                         limit = cms.untracked.int32(1)\n")
    outputfile.write("        )\n")
    outputfile.write(")\n")
    outputfile.write("process.options = cms.untracked.PSet(\n")
    outputfile.write("   wantSummary = cms.untracked.bool(True)\n")
    outputfile.write(")\n")
    outputfile.write("\n")
    outputfile.write("process.source = cms.Source('PoolSource',\n")
    outputfile.write("    fileNames = cms.untracked.vstring(\n")

def printFillCfg_2(pwd, outputfile, njob, outdir, OnlyContCorr, nInter, useES, cuts4s9):
    outputfile.write("import os, sys, imp, re\n")
    outputfile.write('CMSSW_VERSION=os.getenv("CMSSW_VERSION")\n')
    outputfile.write("if(len('" + json_file + "')>0):\n")
    outputfile.write('   if(re.match("CMSSW_5_.*_.*",CMSSW_VERSION)):\n')
    outputfile.write("      import FWCore.PythonUtilities.LumiList as LumiList\n")
    outputfile.write("      process.source.lumisToProcess = LumiList.LumiList(filename = '" + pwd + "/common/" + json_file + "').getVLuminosityBlockRange()\n")
    outputfile.write("   else:\n")
    outputfile.write("      import PhysicsTools.PythonAnalysis.LumiList as LumiList\n")
    outputfile.write("      myLumis = LumiList.LumiList(filename = '" + pwd + "/common/" + json_file + "').getCMSSWString().split(',')\n")
    outputfile.write("      process.source.lumisToProcess = cms.untracked.VLuminosityBlockRange()\n")
    outputfile.write("      process.source.lumisToProcess.extend(myLumis)\n")
    outputfile.write("\n")
    outputfile.write("process.options = cms.untracked.PSet( \n")
    outputfile.write("    wantSummary = cms.untracked.bool(False),\n")
    outputfile.write("    SkipEvent   = cms.untracked.vstring('ProductNotFound')\n")
    outputfile.write(") \n")
    outputfile.write("\n")
    GunName = 'newPi0Dumper_Gun'
    outputfile.write("#NewPi0Dumper_Gun\n")
    outputfile.write("process.load('Analysis.Modules.NewPi0Dumper_Gun_cfi')\n")
    outputfile.write("process." + GunName  + ".OutputFile = cms.untracked.string('/tmp/LocalPi0Alca_" + njob  + ".root')\n")
    outputfile.write("process." + GunName  + ".ExternalGeometry = cms.untracked.string('/afs/cern.ch/user/l/lpernie/scratch1/pi0Calib/pi0/CMSSW_4_2_4/src/CalibCode/submit/common/caloGeometry.root')\n")
    outputfile.write("process." + GunName  + ".useES = cms.untracked.bool("+ useES +")\n")
    outputfile.write("process." + GunName  + ".HLTResults              = cms.untracked.bool(" + HLTResults + ")\n")
    if(Are_pi0):
        outputfile.write("process." + GunName  + ".Are_pi0                 = cms.untracked.bool(True)\n")
    else:
        outputfile.write("process." + GunName  + ".Are_pi0                 = cms.untracked.bool(False)\n")
    outputfile.write("process." + GunName  + ".StoreMCTruth = cms.untracked.bool(False)\n")
    if (OnlyContCorr):
       outputfile.write("process." + GunName  + ".OnlyContCorr = cms.untracked.bool(True)\n")
    else:
       outputfile.write("process." + GunName  + ".OnlyContCorr = cms.untracked.bool(False)\n")
    outputfile.write("#Cuts for AlcaPi0\n")
    outputfile.write("process." + GunName  + ".ptpi0Cut = " + str(ptpi0Cut) + "\n")
    outputfile.write("process." + GunName  + ".s1CluCutEE = " + str(s1CluCutEE) + "\n")
    outputfile.write("process." + GunName  + ".s1CluCut = " + str(s1CluCut) + "\n")
    outputfile.write("process." + GunName  + ".ptCluCut = " + str(ptCluCut) + "\n")
    outputfile.write("process." + GunName  + ".s4s9CluCut = " + str(cuts4s9) + "\n")
    outputfile.write("process." + GunName  + ".DoOffGeom = cms.untracked.bool(False)\n")
    outputfile.write("### choosing proper input tag (recalibration module changes the collection names)\n")
    outputfile.write("if correctHits:\n")
    outputfile.write("    process." + GunName  + ".EBRecHitCollectionTag = cms.untracked.InputTag('ecalPi0ReCorrected','pi0EcalRecHitsEB')\n")
    outputfile.write("    process." + GunName  + ".EERecHitCollectionTag = cms.untracked.InputTag('ecalPi0ReCorrected','pi0EcalRecHitsEE')\n")
    outputfile.write("else:\n")
    outputfile.write("    process." + GunName  + ".EBRecHitCollectionTag = cms.untracked." + ebInputTag + "\n")
    outputfile.write("    process." + GunName  + ".EERecHitCollectionTag = cms.untracked." + eeInputTag + "\n")
    outputfile.write("process." + GunName  + ".ESRecHitCollectionTag = cms.untracked." + esInputTag + "\n")
    outputfile.write("\n")
    outputfile.write("process.p = cms.Path()\n")
    outputfile.write("\n")
    outputfile.write("#use HLT\n")
    outputfile.write("if useHLTFilter:\n")
    outputfile.write("    process.p *= process.AlcaP0Filter\n")
    outputfile.write("\n")
    outputfile.write("if correctHits :\n")
    outputfile.write("    print 'ADDING RECALIB RECHIT MODULE WITH PARAMETERS'\n")
    outputfile.write("    print 'ENERGY SCALE '+str(process.ecalPi0ReCorrected.doEnergyScale)\n")
    outputfile.write("    print 'INTERCALIBRATION '+str(process.ecalPi0ReCorrected.doIntercalib)\n")
    outputfile.write("    print 'LASER '+str(process.ecalPi0ReCorrected.doLaserCorrections)\n")
    outputfile.write("    process.p *= process.ecalPi0ReCorrected\n")
    outputfile.write("\n")
    outputfile.write("#build ntuple\n")
    outputfile.write("process.p *= process." + GunName  + "\n")
